[{"C:\\Users\\vanga\\Desktop\\project\\project-formatting\\src\\index.tsx":"1","C:\\Users\\vanga\\Desktop\\project\\project-formatting\\src\\router\\history.tsx":"2","C:\\Users\\vanga\\Desktop\\project\\project-formatting\\src\\router\\router.tsx":"3","C:\\Users\\vanga\\Desktop\\project\\project-formatting\\src\\App.tsx":"4","C:\\Users\\vanga\\Desktop\\project\\project-formatting\\src\\pages\\MainPage\\index.tsx":"5","C:\\Users\\vanga\\Desktop\\project\\project-formatting\\src\\pages\\FirstPage\\index.tsx":"6","C:\\Users\\vanga\\Desktop\\project\\project-formatting\\src\\pages\\ResizePage\\index.tsx":"7","C:\\Users\\vanga\\Desktop\\project\\project-formatting\\src\\pages\\DownloadPage\\index.tsx":"8","C:\\Users\\vanga\\Desktop\\project\\project-formatting\\src\\effector\\event.ts":"9","C:\\Users\\vanga\\Desktop\\project\\project-formatting\\src\\effector\\stores\\images.ts":"10","C:\\Users\\vanga\\Desktop\\project\\project-formatting\\src\\effector\\stores\\idxKitImages.ts":"11","C:\\Users\\vanga\\Desktop\\project\\project-formatting\\src\\effector\\store.ts":"12","C:\\Users\\vanga\\Desktop\\project\\project-formatting\\src\\effector\\stores\\kitsImagesSetting.ts":"13","C:\\Users\\vanga\\Desktop\\project\\project-formatting\\src\\services\\base64Service.ts":"14","C:\\Users\\vanga\\Desktop\\project\\project-formatting\\src\\effector\\stores\\kitsImages.ts":"15","C:\\Users\\vanga\\Desktop\\project\\project-formatting\\src\\services\\localStorageService.ts":"16","C:\\Users\\vanga\\Desktop\\project\\project-formatting\\src\\effector\\effect.ts":"17","C:\\Users\\vanga\\Desktop\\project\\project-formatting\\src\\utils\\differentFunc.ts":"18","C:\\Users\\vanga\\Desktop\\project\\project-formatting\\src\\components\\Gallery\\index.tsx":"19","C:\\Users\\vanga\\Desktop\\project\\project-formatting\\src\\components\\DownloadBtn\\index.tsx":"20","C:\\Users\\vanga\\Desktop\\project\\project-formatting\\src\\components\\CustomModal\\index.tsx":"21","C:\\Users\\vanga\\Desktop\\project\\project-formatting\\src\\components\\Dropzone\\index.tsx":"22","C:\\Users\\vanga\\Desktop\\project\\project-formatting\\src\\components\\SettingsImg\\index.tsx":"23","C:\\Users\\vanga\\Desktop\\project\\project-formatting\\src\\components\\BlockImgPreview\\index.tsx":"24","C:\\Users\\vanga\\Desktop\\project\\project-formatting\\src\\components\\Buttons\\controlStepperButtons\\index.tsx":"25","C:\\Users\\vanga\\Desktop\\project\\project-formatting\\src\\components\\Crop\\index.tsx":"26","C:\\Users\\vanga\\Desktop\\project\\project-formatting\\src\\services\\imageService.ts":"27","C:\\Users\\vanga\\Desktop\\project\\project-formatting\\src\\services\\fileService.ts":"28","C:\\Users\\vanga\\Desktop\\project\\project-formatting\\src\\components\\Buttons\\CloseButton\\index.tsx":"29","C:\\Users\\vanga\\Desktop\\project\\project-formatting\\src\\components\\Dropzone\\DropzonePreview\\index.tsx":"30","C:\\Users\\vanga\\Desktop\\project\\project-formatting\\src\\components\\Crop\\CropForm\\index.tsx":"31","C:\\Users\\vanga\\Desktop\\project\\project-formatting\\src\\components\\Thumb\\index.tsx":"32"},{"size":361,"mtime":1638538330806,"results":"33","hashOfConfig":"34"},{"size":1102,"mtime":1638538330812,"results":"35","hashOfConfig":"34"},{"size":544,"mtime":1638538330812,"results":"36","hashOfConfig":"34"},{"size":242,"mtime":1638538330792,"results":"37","hashOfConfig":"34"},{"size":2629,"mtime":1638538330810,"results":"38","hashOfConfig":"34"},{"size":935,"mtime":1638538330809,"results":"39","hashOfConfig":"34"},{"size":3989,"mtime":1638538330810,"results":"40","hashOfConfig":"34"},{"size":432,"mtime":1638538330808,"results":"41","hashOfConfig":"34"},{"size":1708,"mtime":1638538330804,"results":"42","hashOfConfig":"34"},{"size":685,"mtime":1638538330805,"results":"43","hashOfConfig":"34"},{"size":532,"mtime":1638538330805,"results":"44","hashOfConfig":"34"},{"size":3187,"mtime":1638538330804,"results":"45","hashOfConfig":"34"},{"size":2401,"mtime":1638538330806,"results":"46","hashOfConfig":"34"},{"size":1799,"mtime":1638538330812,"results":"47","hashOfConfig":"34"},{"size":2884,"mtime":1638538330805,"results":"48","hashOfConfig":"34"},{"size":701,"mtime":1638538330814,"results":"49","hashOfConfig":"34"},{"size":2325,"mtime":1638538330803,"results":"50","hashOfConfig":"34"},{"size":1042,"mtime":1638538330814,"results":"51","hashOfConfig":"34"},{"size":2441,"mtime":1638539346642,"results":"52","hashOfConfig":"34"},{"size":938,"mtime":1638538330798,"results":"53","hashOfConfig":"34"},{"size":676,"mtime":1638538330797,"results":"54","hashOfConfig":"34"},{"size":1092,"mtime":1638538330799,"results":"55","hashOfConfig":"34"},{"size":2209,"mtime":1638538330801,"results":"56","hashOfConfig":"34"},{"size":4415,"mtime":1638538330793,"results":"57","hashOfConfig":"34"},{"size":870,"mtime":1638538330795,"results":"58","hashOfConfig":"34"},{"size":4712,"mtime":1638539221938,"results":"59","hashOfConfig":"34"},{"size":9726,"mtime":1638538330813,"results":"60","hashOfConfig":"34"},{"size":1087,"mtime":1638538330813,"results":"61","hashOfConfig":"34"},{"size":675,"mtime":1638538330794,"results":"62","hashOfConfig":"34"},{"size":901,"mtime":1638538330799,"results":"63","hashOfConfig":"34"},{"size":2153,"mtime":1638539444093,"results":"64","hashOfConfig":"34"},{"size":377,"mtime":1638538330802,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"1qo8u17",{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"68"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"68"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"68"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"68"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"68"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"68"},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"68"},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"132","messages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"134","messages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"136","messages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"C:\\Users\\vanga\\Desktop\\project\\project-formatting\\src\\index.tsx",[],["138","139","140","141","142"],"C:\\Users\\vanga\\Desktop\\project\\project-formatting\\src\\router\\history.tsx",[],"C:\\Users\\vanga\\Desktop\\project\\project-formatting\\src\\router\\router.tsx",[],"C:\\Users\\vanga\\Desktop\\project\\project-formatting\\src\\App.tsx",[],"C:\\Users\\vanga\\Desktop\\project\\project-formatting\\src\\pages\\MainPage\\index.tsx",[],"C:\\Users\\vanga\\Desktop\\project\\project-formatting\\src\\pages\\FirstPage\\index.tsx",[],"C:\\Users\\vanga\\Desktop\\project\\project-formatting\\src\\pages\\ResizePage\\index.tsx",[],"C:\\Users\\vanga\\Desktop\\project\\project-formatting\\src\\pages\\DownloadPage\\index.tsx",[],"C:\\Users\\vanga\\Desktop\\project\\project-formatting\\src\\effector\\event.ts",[],"C:\\Users\\vanga\\Desktop\\project\\project-formatting\\src\\effector\\stores\\images.ts",[],"C:\\Users\\vanga\\Desktop\\project\\project-formatting\\src\\effector\\stores\\idxKitImages.ts",[],"C:\\Users\\vanga\\Desktop\\project\\project-formatting\\src\\effector\\store.ts",[],"C:\\Users\\vanga\\Desktop\\project\\project-formatting\\src\\effector\\stores\\kitsImagesSetting.ts",["143","144","145","146"],"import { calcPercentFromPx } from 'services/imageService';\r\nimport { createStore, forward, sample } from 'effector';\r\nimport * as events from '../event';\r\nimport * as effects from '../effect';\r\nimport { copyObject, deleteItemFromArrByIdx, setLengthKitsImagesFunc } from '../../utils/differentFunc';\r\nimport { saveDataInLocalStorage } from '../../services/localStorageService';\r\n\r\nconst initialStatePoint = {\r\n  pointWidth: null,\r\n  pointPlace: {\r\n    x: null,\r\n    y: null,\r\n  },\r\n};\r\n\r\nexport const $kitsImagesSetting = createStore<any>([])\r\n  .on(effects.getNewSettingsForKitImages.doneData, (state, { transformedSettings, idx }) => {\r\n    const newState = [...state];\r\n    newState.splice(idx, 1, transformedSettings);\r\n\r\n    return newState;\r\n  })\r\n  .on(events.addKitImageSettings, (state, { settingImg, idx, dataByNaturalSize }) => {\r\n    const newState = [...state];\r\n\r\n    const { naturalWidth, naturalHeight } = dataByNaturalSize;\r\n    const percentData = {\r\n      x: calcPercentFromPx(naturalWidth, settingImg.x),\r\n      y: calcPercentFromPx(naturalHeight, settingImg.y),\r\n      width: calcPercentFromPx(naturalWidth, settingImg.width),\r\n      height: calcPercentFromPx(naturalHeight, settingImg.height),\r\n    };\r\n\r\n    newState[idx].items.push(percentData);\r\n    return newState;\r\n  })\r\n  .on(events.cancelImg, deleteItemFromArrByIdx)\r\n  .on(events.setPointImgInKitImages, (state, { pointOnImg, idx }) => {\r\n    const newState = [...state];\r\n    const objSettings = newState[idx];\r\n\r\n    if (pointOnImg) {\r\n      objSettings.point = { ...pointOnImg };\r\n    } else {\r\n      objSettings.point = copyObject(initialStatePoint);\r\n    }\r\n\r\n    return newState;\r\n  })\r\n  .on(events.setCancelCropImg, (state, { idx, idxImg }) => {\r\n    const newState = [...state];\r\n    const objSettings = newState[idx];\r\n    objSettings.items.splice(idxImg, 1);\r\n\r\n    return newState;\r\n  })\r\n  .on(effects.fetchSettingsForImagesFx.doneData, (state, dataFromLocalStorage) => {\r\n    console.log('dataFromLocalStorage', dataFromLocalStorage);\r\n    return dataFromLocalStorage;\r\n  })\r\n  .on(events.setLengthKitsImages, (state, length) =>\r\n    setLengthKitsImagesFunc(state, length, {\r\n      point: initialStatePoint,\r\n      items: [],\r\n    })\r\n  );\r\n\r\n$kitsImagesSetting.watch((state) => {\r\n  console.log('want to save settingForKitsImages', state);\r\n\r\n  saveDataInLocalStorage('settingForKitsImages', state);\r\n});\r\n","C:\\Users\\vanga\\Desktop\\project\\project-formatting\\src\\services\\base64Service.ts",[],"C:\\Users\\vanga\\Desktop\\project\\project-formatting\\src\\effector\\stores\\kitsImages.ts",["147","148"],"import { createStore, sample, guard, combine, restore, forward } from 'effector';\r\nimport * as events from '../event';\r\nimport * as effects from '../effect';\r\nimport { deleteItemFromArrByIdx, setLengthKitsImagesFunc } from '../../utils/differentFunc';\r\nimport { IInfoImg, IPointOnImg } from '../../interfaces/items';\r\nimport { $idxKitImages } from './idxKitImages';\r\nimport { $images } from './images';\r\nimport { $kitsImagesSetting } from './kitsImagesSetting';\r\n\r\nexport const $kitsImages = createStore<IInfoImg[][]>([])\r\n  .on(events.setLengthKitsImages, (state, length) => setLengthKitsImagesFunc(state, length, []))\r\n  .on(events.cancelImg, deleteItemFromArrByIdx)\r\n  .on([events.setKitImages, effects.generateKitImagesBySettings.doneData], (state, { kitImages, idx }) => {\r\n    if (kitImages.length === 0) {\r\n      return state;\r\n    }\r\n    const newState = [...state];\r\n    newState.splice(idx, 1, kitImages);\r\n    return newState;\r\n  })\r\n  .on(events.setCancelCropImg, (state, { idx, idxImg }) => {\r\n    const newState = [...state];\r\n    const kitImages = newState[idx];\r\n    kitImages.splice(idxImg, 1);\r\n\r\n    return newState;\r\n  })\r\n  .on(effects.generateKitsImages.doneData, (state, kitsImages) => {\r\n    let newState = [...state];\r\n    newState = newState.map((el, idx) => {\r\n      if (kitsImages[idx]) {\r\n        return kitsImages[idx];\r\n      }\r\n      return el;\r\n    });\r\n    return newState;\r\n  });\r\n\r\nguard({\r\n  source: combine([restore(effects.fetchImagesFx, []), restore(effects.fetchSettingsForImagesFx, [])]),\r\n  filter: (storeComb: any): any => storeComb[0].length && storeComb[1].length,\r\n  target: effects.generateKitsImages,\r\n});\r\n\r\nconst elementsForGenerateSettingsByPoint = sample(\r\n  combine([$idxKitImages, $images, $kitsImagesSetting]),\r\n  events.setPointImg,\r\n  (arrayStores: any, pointOnImg: IPointOnImg) => {\r\n    const { idx } = arrayStores[0];\r\n    return {\r\n      idx,\r\n      fileImage: arrayStores[1][idx],\r\n      kitImagesSetting: arrayStores[2][idx],\r\n      pointOnImg,\r\n    };\r\n  }\r\n);\r\n\r\nguard({\r\n  source: elementsForGenerateSettingsByPoint,\r\n  filter: ({ pointOnImg }) => pointOnImg !== null,\r\n  target: effects.getNewSettingsForKitImages,\r\n});\r\n\r\nconst elementsForGenerateKitImagesBySettings = sample(\r\n  combine([$idxKitImages, $images, $kitsImagesSetting]),\r\n  $kitsImagesSetting,\r\n  (arrayStores: any) => {\r\n    const { idx } = arrayStores[0];\r\n    return {\r\n      idx,\r\n      fileImage: arrayStores[1][idx],\r\n      kitImagesSetting: arrayStores[2][idx],\r\n    };\r\n  }\r\n);\r\n\r\nguard({\r\n  source: elementsForGenerateKitImagesBySettings,\r\n  filter: ({ kitImagesSetting }) => kitImagesSetting?.point?.pointWidth !== null,\r\n  target: effects.generateKitImagesBySettings,\r\n});\r\n\r\n$kitsImages.watch((state) => {\r\n  const hasImages = state.some((kit: any) => kit.length);\r\n  if (hasImages) {\r\n    events.setIsCroppedImages(hasImages);\r\n  }\r\n});\r\n","C:\\Users\\vanga\\Desktop\\project\\project-formatting\\src\\services\\localStorageService.ts",["149"],"import { PossibleStringType } from '../interfaces/items';\r\nimport { convertFilesInBase64Items } from './base64Service';\r\n\r\nconst saveData = (localName: string, data: any) => {\r\n  const convertedDataToString = JSON.stringify(data);\r\n  localStorage.setItem(localName, convertedDataToString);\r\n};\r\n\r\nexport const saveDataInLocalStorage = (localName: string, data: any, type = 'string'): void => {\r\n  if (type === 'files') {\r\n    const convertedDataToBase64 = convertFilesInBase64Items(data);\r\n    convertedDataToBase64.then((results: PossibleStringType[]) => {\r\n      // console.log('results', results);\r\n      saveData(localName, results);\r\n    });\r\n  } else {\r\n    saveData(localName, data);\r\n  }\r\n};\r\n","C:\\Users\\vanga\\Desktop\\project\\project-formatting\\src\\effector\\effect.ts",["150"],"import { createEffect } from 'effector';\r\nimport { convertBase64ItemsInFiles } from '../services/base64Service';\r\nimport {\r\n  getImgFromPreviewFile,\r\n  generateKitImages,\r\n  generateNewSettingsForKitImages,\r\n  transformSettingsInPx,\r\n  transformSettingsInPercent,\r\n} from '../services/imageService';\r\nimport { IInfoImg, ISettingsImage } from '../interfaces/items';\r\n\r\nexport const fetchImagesFx = createEffect(async (data: any) => {\r\n  const req = await convertBase64ItemsInFiles(data);\r\n  return req;\r\n});\r\n\r\nexport const fetchSettingsForImagesFx = createEffect((data: any) => data);\r\n\r\nexport const generateKitsImages = createEffect(async (data: any): Promise<IInfoImg[][]> => {\r\n  const [images, settingsForKits] = data;\r\n  const kitsImages = [];\r\n  for (let idx = 0; idx < settingsForKits.length; idx++) {\r\n    const imageKitsettings = settingsForKits[idx];\r\n    const currentImg = images[idx];\r\n    const kitImages = await handleGenerateKitItemsBySettings(currentImg, imageKitsettings);\r\n    kitsImages.push(kitImages);\r\n  }\r\n\r\n  return kitsImages;\r\n});\r\n\r\nexport const getNewSettingsForKitImages = createEffect(\r\n  async (data: any): Promise<{ transformedSettings: ISettingsImage; idx: number }> => {\r\n    const { fileImage, kitImagesSetting, pointOnImg, idx } = data;\r\n\r\n    const imgElement = await getImgFromPreviewFile(fileImage.preview);\r\n    const newSettingsForKitImages = generateNewSettingsForKitImages(imgElement, kitImagesSetting.items, pointOnImg);\r\n    const transformedSettings = transformSettingsInPercent(newSettingsForKitImages, imgElement);\r\n    return { transformedSettings, idx };\r\n  }\r\n);\r\n\r\nexport const generateKitImagesBySettings = createEffect(\r\n  async (data: any): Promise<{ kitImages: IInfoImg[]; idx: number }> => {\r\n    const { fileImage, kitImagesSetting, idx } = data;\r\n    const kitImages = await handleGenerateKitItemsBySettings(fileImage, kitImagesSetting);\r\n\r\n    return { kitImages, idx };\r\n  }\r\n);\r\n\r\nconst handleGenerateKitItemsBySettings = async (\r\n  fileImage: IInfoImg,\r\n  kitImagesSetting: ISettingsImage\r\n): Promise<IInfoImg[]> => {\r\n  const imgElement = await getImgFromPreviewFile(fileImage.preview!);\r\n  const pxSettings = transformSettingsInPx(kitImagesSetting, imgElement);\r\n  const kitImages = await generateKitImages(imgElement, pxSettings);\r\n  return kitImages;\r\n};\r\n","C:\\Users\\vanga\\Desktop\\project\\project-formatting\\src\\utils\\differentFunc.ts",["151","152"],"import { IPointPlace, IobjIdxKitImages } from '../interfaces/items';\r\n\r\nexport const findNewCurrentIdx = (state: IobjIdxKitImages, operation: string): IobjIdxKitImages => {\r\n  const newIdx = operation === '-' ? state.idx - 1 : state.idx + 1;\r\n\r\n  const hasIdx = newIdx <= state.maxIdx && newIdx > -1;\r\n  if (!hasIdx) {\r\n    return state;\r\n  }\r\n\r\n  return {\r\n    ...state,\r\n    idx: newIdx,\r\n  };\r\n};\r\n\r\nexport const deleteItemFromArrByIdx = <T>(state: Array<T>, idx: number): Array<T> => {\r\n  const newState = [...state];\r\n  newState.splice(idx, 1);\r\n  return newState;\r\n};\r\n\r\nexport const copyObject = <T>(object: T): T => JSON.parse(JSON.stringify(object));\r\n\r\nexport const setLengthKitsImagesFunc = <T>(state: Array<T>, length: number, newItem: T): Array<T> => {\r\n  const newState = [...state];\r\n  if (length > state.length) {\r\n    const needIncreaseLength = length - state.length;\r\n    const newItems = new Array(needIncreaseLength).fill(0).map(() => copyObject(newItem));\r\n\r\n    newState.push(...newItems);\r\n  }\r\n  return newState;\r\n};\r\n","C:\\Users\\vanga\\Desktop\\project\\project-formatting\\src\\components\\Gallery\\index.tsx",[],"C:\\Users\\vanga\\Desktop\\project\\project-formatting\\src\\components\\DownloadBtn\\index.tsx",[],"C:\\Users\\vanga\\Desktop\\project\\project-formatting\\src\\components\\CustomModal\\index.tsx",[],"C:\\Users\\vanga\\Desktop\\project\\project-formatting\\src\\components\\Dropzone\\index.tsx",[],"C:\\Users\\vanga\\Desktop\\project\\project-formatting\\src\\components\\SettingsImg\\index.tsx",[],"C:\\Users\\vanga\\Desktop\\project\\project-formatting\\src\\components\\BlockImgPreview\\index.tsx",[],"C:\\Users\\vanga\\Desktop\\project\\project-formatting\\src\\components\\Buttons\\controlStepperButtons\\index.tsx",[],"C:\\Users\\vanga\\Desktop\\project\\project-formatting\\src\\components\\Crop\\index.tsx",["153","154","155","156","157"],"/* eslint-disable jsx-a11y/no-static-element-interactions */\r\nimport React, { FC, useEffect, useRef, useState } from 'react';\r\nimport Cropper from 'react-cropper';\r\nimport 'cropperjs/dist/cropper.css';\r\n\r\nimport { useStore } from 'effector-react';\r\nimport { setCropDataPx, setAspect, setCropperRef, setTypeCrop } from 'effector/event';\r\nimport { ICropNewData, IImgSettingsNaturalSize, IPointOnImg, ISettingImg } from 'interfaces/items';\r\nimport CropForm from './CropForm';\r\nimport { $aspect, $cropDataPercent, $cropDataPx, $typeCrop } from '../../effector/store';\r\nimport { getPositionByPoint, calcPxFromPercent, transformPxAndPercent } from '../../services/imageService';\r\n\r\nconst Crop: FC<{\r\n  src: string;\r\n  point: IPointOnImg;\r\n  addCropedImg: (base64Img: string, settingImg: ISettingImg, dataByNaturalSize: IImgSettingsNaturalSize) => void;\r\n  onCloseModal: () => void;\r\n}> = ({ addCropedImg, src, onCloseModal, point }) => {\r\n  const typeCrop = useStore($typeCrop);\r\n  const cropperRef = useRef<HTMLImageElement>(null);\r\n  const cropDataPx = useStore($cropDataPx);\r\n  const cropDataPercent = useStore($cropDataPercent);\r\n  const aspect = useStore($aspect);\r\n\r\n  const [savedPxData, setSavedPxData] = useState(cropDataPx);\r\n  let changeActive = false;\r\n  const getCropper = () => {\r\n    const imageElement: any = cropperRef?.current;\r\n    const cropper: any = imageElement?.cropper;\r\n    return cropper;\r\n  };\r\n\r\n  useEffect(() => {\r\n    setCropperRef(cropperRef);\r\n  }, [cropperRef]);  \r\n\r\n  const onCrop = () => {\r\n    if (changeActive) {\r\n      changeActive = false;\r\n      return;\r\n    }\r\n    const cropper: any = getCropper();\r\n    let newData = cropper.getData({ rounded: true });\r\n    const imgSettings = cropper.getImageData();\r\n\r\n    if (point.pointWidth) {\r\n      newData = getPositionByPoint(newData, point, imgSettings);\r\n    }\r\n    changeActive = true;\r\n\r\n    cropper.setData(newData);\r\n    setCropDataPx(newData);\r\n  };\r\n\r\n  const onSetCrop = (newValue: ICropNewData) => {\r\n    const cropper: any = getCropper();\r\n    const currenValues = cropper.getData({ rounded: true });\r\n    const imgSettings = cropper.getImageData();\r\n\r\n    let newValuesCrop = null;\r\n    let valueByPoint = null;\r\n\r\n    if (typeCrop === '%') {\r\n      const transformNewValue = transformPxAndPercent(cropperRef.current!, newValue, calcPxFromPercent);\r\n      newValuesCrop = { ...currenValues, ...transformNewValue };\r\n    } else {\r\n      newValuesCrop = { ...currenValues, ...newValue };\r\n    }\r\n\r\n    if (point.pointWidth) {\r\n      valueByPoint = getPositionByPoint(newValuesCrop, point, imgSettings);\r\n    }\r\n\r\n    cropper.setData(valueByPoint || newValuesCrop);\r\n  };\r\n\r\n  const transformDataByPointCrop = () => {\r\n    if (point) {\r\n      const cropper: any = getCropper();\r\n      const imgSettings = cropper.getImageData();\r\n      const cropperData = cropper.getData({ rounded: true });\r\n      const getData = getPositionByPoint(cropperData, point, imgSettings);\r\n\r\n      cropper.crop();\r\n      cropper.setData({ ...getData });\r\n    }\r\n  };\r\n\r\n  const getCropImage = () => {\r\n    const cropper: any = getCropper();\r\n    const cropperData = cropper.getData({ rounded: true });\r\n    const imgSettings = cropper.getImageData();\r\n\r\n    const dataByImg = {\r\n      x: cropperData.x,\r\n      y: cropperData.y,\r\n      width: cropperData.width,\r\n      height: cropperData.height,\r\n    };\r\n\r\n    const base64Img = cropper.getCroppedCanvas().toDataURL();\r\n\r\n    addCropedImg(base64Img, dataByImg, imgSettings);\r\n    onCloseModal();\r\n  };\r\n\r\n  useEffect(() => {\r\n    const cropper: any = getCropper();\r\n    if (typeCrop === 'aspect') {\r\n      cropper.setAspectRatio(aspect.value);\r\n    }\r\n  }, [aspect, typeCrop]);\r\n\r\n  useEffect(() => {\r\n    setTypeCrop('px');\r\n  }, []);\r\n\r\n  const onTypeCrop = (newType: string): void => {\r\n    if (typeCrop === 'aspect' && newType !== 'aspect') {\r\n      const cropper: any = getCropper();\r\n      cropper.setAspectRatio(NaN).setData({ ...cropDataPx });\r\n    }\r\n\r\n    setTypeCrop(newType);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Cropper\r\n        ref={cropperRef}\r\n        autoCrop={false}\r\n        autoCropArea={1}\r\n        background={false}\r\n        crop={onCrop}\r\n        guides={false}\r\n        ready={() => {\r\n          transformDataByPointCrop();\r\n        }}\r\n        src={src}\r\n        viewMode={1}\r\n        zoomable={false}\r\n        responsive\r\n      />\r\n      <CropForm\r\n        aspect={aspect.sides}\r\n        cropPercent={cropDataPercent}\r\n        cropPx={cropDataPx}\r\n        getCropImage={getCropImage}\r\n        setTypeCrop={onTypeCrop}\r\n        typeCrop={typeCrop}\r\n        onSetAspect={setAspect}\r\n        onSetCrop={onSetCrop}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Crop;\r\n","C:\\Users\\vanga\\Desktop\\project\\project-formatting\\src\\services\\imageService.ts",["158","159","160","161","162","163"],"import {\r\n  ICropNewData,\r\n  IPointPlace,\r\n  ICropFormData,\r\n  IPointOnImg,\r\n  IImgSettingsNaturalSize,\r\n  ISettingImg,\r\n  IInfoImg,\r\n  ISettingsImage,\r\n} from '../interfaces/items';\r\n\r\nexport const getImgFromPreviewFile = (preview: string): Promise<HTMLImageElement> =>\r\n  new Promise((resolve) => {\r\n    const img: HTMLImageElement = new Image();\r\n    img.onload = () => {\r\n      resolve(img);\r\n    };\r\n    img.src = preview;\r\n  });\r\n\r\nexport const calcProportion = (firstArg: number, necessarySize: number, secondArg: number): number => {\r\n  const propotion: number = Math.round(firstArg * (necessarySize / secondArg));\r\n  return propotion;\r\n};\r\n\r\nexport const getTypeByPropotion = (proportionWidth: number, proportionHeight: number, types: string[]): string => {\r\n  if (proportionWidth / proportionHeight > 1) {\r\n    return types[0];\r\n  }\r\n  return types[1];\r\n};\r\n\r\nexport const calcPxFromPercent = (naturalSize: number, val: number): number => {\r\n  const pixelVal = Math.round(naturalSize * (val / 100));\r\n  return pixelVal;\r\n};\r\n\r\nexport const calcPercentFromPx = (naturalSize: number, val: number): number => {\r\n  const percentVal = Math.round((val / naturalSize) * 100);\r\n  return percentVal;\r\n};\r\n\r\nexport const transformPxAndPercent = (\r\n  image: HTMLImageElement,\r\n  objCrop: ICropNewData,\r\n  fnTransform: (naturalSize: number, val: number) => number\r\n): ICropNewData => {\r\n  let height = null;\r\n  let width = null;\r\n  const transformedValues: { width?: number; height?: number } = {};\r\n  if (objCrop.height) {\r\n    height = fnTransform(image.naturalHeight, objCrop.height);\r\n    transformedValues.height = height;\r\n  }\r\n  if (objCrop.width) {\r\n    width = fnTransform(image.naturalWidth, objCrop.width);\r\n    transformedValues.width = width;\r\n  }\r\n  return transformedValues;\r\n};\r\n\r\nexport const calcAspect = ({ width, height }: ICropFormData): number => {\r\n  if (height <= 0 || width <= 0) {\r\n    return 1;\r\n  }\r\n  const aspect = width / height;\r\n  return aspect;\r\n};\r\n\r\nexport const generateImagesBySettings = async (img: HTMLImageElement, settings: ISettingImg): Promise<Blob> => {\r\n  const canvas = document.createElement('canvas');\r\n  canvas.width = settings.width;\r\n  canvas.height = settings.height;\r\n\r\n  const context = canvas.getContext('2d');\r\n\r\n  context!.drawImage(\r\n    img,\r\n    settings.x,\r\n    settings.y,\r\n    settings.width,\r\n    settings.height,\r\n    0,\r\n    0,\r\n    settings.width,\r\n    settings.height\r\n  );\r\n\r\n  return new Promise((resolve, reject) => {\r\n    canvas.toBlob(\r\n      (blob) => {\r\n        if (blob) {\r\n          resolve(blob);\r\n        }\r\n        reject();\r\n      },\r\n      'image/jpeg',\r\n      1\r\n    );\r\n  });\r\n};\r\n\r\nexport const getPositionByPoint = (\r\n  data: ICropFormData,\r\n  point: IPointOnImg,\r\n  imgSettings: IImgSettingsNaturalSize\r\n): ISettingImg => {\r\n  const pointFromPx = {\r\n    pointPlace: {\r\n      x: calcPxFromPercent(imgSettings.naturalWidth, point.pointPlace.x),\r\n      y: calcPxFromPercent(imgSettings.naturalHeight, point.pointPlace.y),\r\n    },\r\n    pointWidth: calcPxFromPercent(imgSettings.naturalHeight, point.pointWidth),\r\n  };\r\n\r\n  const radius = pointFromPx.pointWidth;\r\n\r\n  const minSide = radius * 2;\r\n\r\n  const newWidth = Math.max(minSide, data.width);\r\n  const newHeight = Math.max(minSide, data.height);\r\n\r\n  const newLeft = pointFromPx.pointPlace.x - newWidth / 2;\r\n  const newTop = pointFromPx.pointPlace.y - newHeight / 2;\r\n\r\n  return {\r\n    ...data,\r\n    width: newWidth,\r\n    height: newHeight,\r\n    x: newLeft >= 0 ? newLeft : 0,\r\n    y: newTop >= 0 ? newTop : 0,\r\n  };\r\n};\r\n\r\nexport const getPositionByPointDouble = (\r\n  data: ICropFormData,\r\n  point: IPointOnImg,\r\n  imgSettings: IImgSettingsNaturalSize\r\n): ISettingImg => {\r\n  const pointFromPx = {\r\n    x: calcPxFromPercent(imgSettings.naturalWidth, point.pointPlace.x),\r\n    y: calcPxFromPercent(imgSettings.naturalHeight, point.pointPlace.y),\r\n  };\r\n  const dataFromPx = {\r\n    width: calcPxFromPercent(imgSettings.naturalWidth, data.width),\r\n    height: calcPxFromPercent(imgSettings.naturalHeight, data.height),\r\n  };\r\n  const halfWidth = dataFromPx.width / 2;\r\n  const halfHeight = dataFromPx.height / 2;\r\n\r\n  let newPoints: any = {\r\n    newLeft: pointFromPx.x - halfWidth,\r\n    newTop: pointFromPx.y - halfHeight,\r\n    newRight: pointFromPx.x + halfWidth,\r\n    newBot: pointFromPx.y + halfHeight,\r\n  };\r\n\r\n  if (imgSettings.naturalWidth < newPoints.newRight) {\r\n    const needPxW = newPoints.newRight - imgSettings.naturalWidth;\r\n    const newRight = newPoints.newRight - needPxW;\r\n    const newLeft = newPoints.newLeft - needPxW;\r\n    newPoints = {\r\n      ...newPoints,\r\n      newRight,\r\n      newLeft,\r\n    };\r\n  }\r\n\r\n  if (imgSettings.naturalHeight < newPoints.newBot) {\r\n    const needPxH = newPoints.newBot - imgSettings.naturalHeight;\r\n    const newBot = newPoints.newBot - needPxH;\r\n    const newTop = newPoints.newTop - needPxH;\r\n    newPoints = {\r\n      ...newPoints,\r\n      newBot,\r\n      newTop,\r\n    };\r\n  }\r\n\r\n  return {\r\n    ...dataFromPx,\r\n    x: newPoints.newLeft >= 0 ? newPoints.newLeft : 0,\r\n    y: newPoints.newTop >= 0 ? newPoints.newTop : 0,\r\n  };\r\n};\r\n\r\nexport const generateKitImages = async (\r\n  imgElement: HTMLImageElement,\r\n  kitSettings: ISettingsImage\r\n): Promise<IInfoImg[]> => {\r\n  const kitImages: IInfoImg[] = [];\r\n  for (let idxEl = 0; idxEl < kitSettings.items.length; idxEl++) {\r\n    const settings = kitSettings.items[idxEl];\r\n    const blobImg: Blob = await generateImagesBySettings(imgElement, settings);\r\n    const fileImg: IInfoImg = {\r\n      infoByFile: new File([blobImg], `${idxEl}.jpg`),\r\n    };\r\n    fileImg.preview = URL.createObjectURL(fileImg.infoByFile);\r\n\r\n    kitImages.push(fileImg);\r\n  }\r\n  return kitImages;\r\n};\r\n\r\nexport const generateNewSettingsForKitImages = (\r\n  imgElement: HTMLImageElement,\r\n  settings: ISettingImg[],\r\n  newPoint: IPointOnImg\r\n): ISettingsImage => {\r\n  const newKitSettings: any[] = [];\r\n  for (let idxEl = 0; idxEl < settings.length; idxEl++) {\r\n    let currentSetting = settings[idxEl];\r\n    currentSetting = getPositionByPointDouble(currentSetting, newPoint, imgElement);\r\n\r\n    newKitSettings.push(currentSetting);\r\n  }\r\n  return {\r\n    items: newKitSettings,\r\n    point: newPoint,\r\n  };\r\n};\r\n\r\nexport const calcMinMaxValue = (first: number, second: number): number[] => {\r\n  if (first > second) {\r\n    return [second, first];\r\n  }\r\n  return [first, second];\r\n};\r\n\r\nexport const calcWidthPoint = (firstObj: IPointPlace, secondObj?: IPointPlace): number => {\r\n  const defaultWidth = 3;\r\n\r\n  if (!secondObj) {\r\n    return defaultWidth;\r\n  }\r\n\r\n  const [minX, maxX] = calcMinMaxValue(firstObj.x, secondObj.x);\r\n  const [minY, maxY] = calcMinMaxValue(firstObj.y, secondObj.y);\r\n\r\n  const newWidth = {\r\n    x: Math.round(maxX - minX),\r\n    y: Math.round(maxY - minY),\r\n  };\r\n\r\n  const [, maxNewWidth] = calcMinMaxValue(newWidth.x, newWidth.y);\r\n\r\n  return Math.max(maxNewWidth, defaultWidth);\r\n};\r\n\r\nexport const calcWidthPointOnCanvas = (pointWidth: number, canvas: HTMLCanvasElement, func: any): number => {\r\n  const maxVal = Math.max(canvas.width, canvas.height);\r\n  const widthPercent = func(maxVal, pointWidth);\r\n  return widthPercent;\r\n};\r\n\r\nexport const calcPlacePoint = (start: IPointPlace, end: IPointPlace): IPointPlace => {\r\n  const halfWidth = {\r\n    x: Math.round((end.x! - start.x!) / 2),\r\n    y: Math.round((end.y! - start.y!) / 2),\r\n  };\r\n\r\n  const newPointPlace = {\r\n    x: halfWidth.x + start.x!,\r\n    y: halfWidth.y + start.y!,\r\n  };\r\n\r\n  return newPointPlace;\r\n};\r\n\r\nexport const getPxWidthPoint = (pointWidth: number, canvas: HTMLCanvasElement) => {\r\n  const widthPointPx = calcWidthPointOnCanvas(pointWidth, canvas, calcPxFromPercent);\r\n  const defaultWidthPoint = 3;\r\n\r\n  if (widthPointPx === 0) {\r\n    return defaultWidthPoint;\r\n  }\r\n  return widthPointPx;\r\n};\r\n\r\nexport const calcPxStatePoint = (argStatePoint: IPointOnImg, canvas: HTMLCanvasElement): IPointOnImg => {\r\n  if (argStatePoint?.pointPlace?.x && argStatePoint?.pointPlace?.y && argStatePoint.pointWidth && canvas) {\r\n    return {\r\n      pointPlace: {\r\n        x: calcPxFromPercent(canvas.width, argStatePoint.pointPlace.x),\r\n        y: calcPxFromPercent(canvas.height, argStatePoint.pointPlace.y),\r\n      },\r\n      pointWidth: getPxWidthPoint(argStatePoint.pointWidth, canvas),\r\n    };\r\n  }\r\n\r\n  return argStatePoint;\r\n};\r\n\r\nexport const getWidthPoint = (firstObj: IPointPlace, secondObj?: IPointPlace) => {\r\n  const pointWidth = calcWidthPoint(firstObj, secondObj);\r\n  // const widthPointPercent = calcWidthPointOnCanvas(pointWidth, canvasPreview.current, calcPercentFromPx);\r\n\r\n  return pointWidth;\r\n};\r\n\r\nexport const transformSettingsInPercent = ({ items, point }: ISettingsImage, imgElement: HTMLImageElement) => {\r\n  const changedItems = items.map((el: ISettingImg) => {\r\n    const changedEl = {\r\n      x: calcPercentFromPx(imgElement.naturalWidth, el.x),\r\n      y: calcPercentFromPx(imgElement.naturalHeight, el.y),\r\n      width: calcPercentFromPx(imgElement.naturalWidth, el.width),\r\n      height: calcPercentFromPx(imgElement.naturalHeight, el.height),\r\n    };\r\n    return changedEl;\r\n  });\r\n\r\n  return {\r\n    point,\r\n    items: changedItems,\r\n  };\r\n};\r\n\r\nexport const transformSettingsInPx = ({ items, point }: ISettingsImage, imgElement: HTMLImageElement) => {\r\n  const changedItems = items.map((el: ISettingImg) => {\r\n    const changedEl = {\r\n      x: calcPxFromPercent(imgElement.naturalWidth, el.x),\r\n      y: calcPxFromPercent(imgElement.naturalHeight, el.y),\r\n      width: calcPxFromPercent(imgElement.naturalWidth, el.width),\r\n      height: calcPxFromPercent(imgElement.naturalHeight, el.height),\r\n    };\r\n    return changedEl;\r\n  });\r\n\r\n  return {\r\n    point,\r\n    items: changedItems,\r\n  };\r\n};\r\n","C:\\Users\\vanga\\Desktop\\project\\project-formatting\\src\\services\\fileService.ts",[],"C:\\Users\\vanga\\Desktop\\project\\project-formatting\\src\\components\\Buttons\\CloseButton\\index.tsx",[],"C:\\Users\\vanga\\Desktop\\project\\project-formatting\\src\\components\\Dropzone\\DropzonePreview\\index.tsx",[],"C:\\Users\\vanga\\Desktop\\project\\project-formatting\\src\\components\\Crop\\CropForm\\index.tsx",["164"],"C:\\Users\\vanga\\Desktop\\project\\project-formatting\\src\\components\\Thumb\\index.tsx",[],{"ruleId":"165","replacedBy":"166"},{"ruleId":"167","replacedBy":"168"},{"ruleId":"169","replacedBy":"170"},{"ruleId":"171","replacedBy":"172"},{"ruleId":"173","replacedBy":"174"},{"ruleId":"175","severity":1,"message":"176","line":2,"column":23,"nodeType":"177","messageId":"178","endLine":2,"endColumn":30},{"ruleId":"179","severity":1,"message":"176","line":2,"column":23,"nodeType":"177","messageId":"178","endLine":2,"endColumn":30},{"ruleId":"175","severity":1,"message":"180","line":2,"column":32,"nodeType":"177","messageId":"178","endLine":2,"endColumn":38},{"ruleId":"179","severity":1,"message":"180","line":2,"column":32,"nodeType":"177","messageId":"178","endLine":2,"endColumn":38},{"ruleId":"175","severity":1,"message":"176","line":1,"column":56,"nodeType":"177","messageId":"178","endLine":1,"endColumn":63},{"ruleId":"179","severity":1,"message":"176","line":1,"column":56,"nodeType":"177","messageId":"178","endLine":1,"endColumn":63},{"ruleId":"181","severity":1,"message":"182","line":9,"column":59,"nodeType":"177","messageId":"183","endLine":9,"endColumn":68},{"ruleId":"184","severity":1,"message":"185","line":25,"column":23,"nodeType":"186","messageId":"187","endLine":25,"endColumn":91},{"ruleId":"175","severity":1,"message":"188","line":1,"column":10,"nodeType":"177","messageId":"178","endLine":1,"endColumn":21},{"ruleId":"179","severity":1,"message":"188","line":1,"column":10,"nodeType":"177","messageId":"178","endLine":1,"endColumn":21},{"ruleId":"189","severity":1,"message":"190","line":4,"column":1,"nodeType":"191","endLine":4,"endColumn":37},{"ruleId":"175","severity":1,"message":"192","line":25,"column":10,"nodeType":"177","messageId":"178","endLine":25,"endColumn":21},{"ruleId":"179","severity":1,"message":"192","line":25,"column":10,"nodeType":"177","messageId":"178","endLine":25,"endColumn":21},{"ruleId":"175","severity":1,"message":"193","line":25,"column":23,"nodeType":"177","messageId":"178","endLine":25,"endColumn":37},{"ruleId":"179","severity":1,"message":"193","line":25,"column":23,"nodeType":"177","messageId":"178","endLine":25,"endColumn":37},{"ruleId":"184","severity":1,"message":"185","line":194,"column":27,"nodeType":"186","messageId":"187","endLine":194,"endColumn":79},{"ruleId":"181","severity":1,"message":"194","line":250,"column":87,"nodeType":"177","messageId":"183","endLine":250,"endColumn":96},{"ruleId":"181","severity":1,"message":"195","line":270,"column":32,"nodeType":"196","messageId":"197","endLine":270,"endColumn":82},{"ruleId":"181","severity":1,"message":"195","line":294,"column":30,"nodeType":"196","messageId":"197","endLine":294,"endColumn":81},{"ruleId":"181","severity":1,"message":"195","line":301,"column":43,"nodeType":"196","messageId":"197","endLine":301,"endColumn":110},{"ruleId":"181","severity":1,"message":"195","line":318,"column":38,"nodeType":"196","messageId":"197","endLine":318,"endColumn":105},{"ruleId":"198","severity":1,"message":"199","line":57,"column":6,"nodeType":"200","endLine":57,"endColumn":45,"suggestions":"201"},"lines-around-directive",["202"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"no-unused-vars","'forward' is defined but never used.","Identifier","unusedVar","@typescript-eslint/no-unused-vars","'sample' is defined but never used.","@typescript-eslint/explicit-module-boundary-types","Argument 'data' should be typed with a non-any type.","anyTypedArg","no-await-in-loop","Unexpected `await` inside a loop.","AwaitExpression","unexpectedAwait","'IPointPlace' is defined but never used.","import/no-extraneous-dependencies","'cropperjs' should be listed in the project's dependencies. Run 'npm i -S cropperjs' to add it","ImportDeclaration","'savedPxData' is assigned a value but never used.","'setSavedPxData' is assigned a value but never used.","Argument 'func' should be typed with a non-any type.","Missing return type on function.","ArrowFunctionExpression","missingReturnType","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'onSetValue'. Either include it or remove the dependency array.","ArrayExpression",["203"],"padding-line-between-statements",{"desc":"204","fix":"205"},"Update the dependencies array to be: [cropPx, typeCrop, onSetValue, cropPercent, aspect]",{"range":"206","text":"207"},[1630,1669],"[cropPx, typeCrop, onSetValue, cropPercent, aspect]"]